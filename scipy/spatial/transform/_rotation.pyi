from _typeshed import Incomplete
from scipy._lib._util import check_random_state as check_random_state
from scipy.spatial.transform._rotation_groups import create_group as create_group
from typing import Any, ClassVar, overload

__test__: dict

class Rotation:
    align_vectors: ClassVar[method] = ...
    concatenate: ClassVar[method] = ...
    create_group: ClassVar[method] = ...
    from_davenport: ClassVar[method] = ...
    from_euler: ClassVar[method] = ...
    from_matrix: ClassVar[method] = ...
    from_mrp: ClassVar[method] = ...
    from_quat: ClassVar[method] = ...
    from_rotvec: ClassVar[method] = ...
    identity: ClassVar[method] = ...
    random: ClassVar[method] = ...
    single: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def apply(self, vectors, inverse=...) -> Any: ...
    @overload
    def apply(self, vector) -> Any: ...
    @overload
    def apply(self, vector) -> Any: ...
    @overload
    def apply(self, vectors) -> Any: ...
    @overload
    def apply(self, vectors) -> Any: ...
    @overload
    def apply(self, vector) -> Any: ...
    @overload
    def apply(self, vector) -> Any: ...
    @overload
    def apply(self, vectors) -> Any: ...
    @overload
    def apply(self, vectors) -> Any: ...
    @overload
    def apply(self, vectors, inverse=...) -> Any: ...
    @overload
    def approx_equal(self, Rotationother, atol=..., degrees=...) -> Any: ...
    @overload
    def approx_equal(self, q) -> Any: ...
    def as_davenport(self, axes, order, degrees=...) -> Any: ...
    def as_euler(self, seq, degrees=...) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_quat(self, canonical=...) -> Any: ...
    @overload
    def as_quat(self) -> Any: ...
    @overload
    def as_quat(self) -> Any: ...
    @overload
    def as_quat(self) -> Any: ...
    @overload
    def as_quat(self) -> Any: ...
    @overload
    def as_quat(self) -> Any: ...
    @overload
    def as_quat(self, canonical=...) -> Any: ...
    @overload
    def as_rotvec(self, degrees=...) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @overload
    def as_rotvec(self, degrees=...) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @overload
    def inv(self) -> Any: ...
    @overload
    def inv(self) -> Any: ...
    @overload
    def inv(self) -> Any: ...
    @overload
    def magnitude(self) -> Any: ...
    @overload
    def magnitude(self, s) -> Any: ...
    @overload
    def magnitude(self) -> Any: ...
    @overload
    def magnitude(self) -> Any: ...
    @overload
    def mean(self, weights=...) -> Any: ...
    @overload
    def mean(self) -> Any: ...
    def reduce(self, left=..., right=..., return_indices=...) -> Any: ...
    def __bool__(self) -> bool: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __mul__(self, other): ...
    def __pow__(self, other): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __rmul__(self, other): ...
    def __rpow__(self, other): ...
    def __setitem__(self, index, object) -> None: ...
    def __setstate_cython__(self, *args, **kwargs): ...

class Slerp:
    def __init__(self, key_times, key_rots) -> Any: ...
    def __call__(self, *args, **kwargs): ...
