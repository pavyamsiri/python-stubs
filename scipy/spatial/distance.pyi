import dataclasses
from _typeshed import Incomplete
from typing import Callable

__all__ = [
    "braycurtis",
    "canberra",
    "cdist",
    "chebyshev",
    "cityblock",
    "correlation",
    "cosine",
    "dice",
    "directed_hausdorff",
    "euclidean",
    "hamming",
    "is_valid_dm",
    "is_valid_y",
    "jaccard",
    "jensenshannon",
    "kulczynski1",
    "mahalanobis",
    "minkowski",
    "num_obs_dm",
    "num_obs_y",
    "pdist",
    "rogerstanimoto",
    "russellrao",
    "seuclidean",
    "sokalmichener",
    "sokalsneath",
    "sqeuclidean",
    "squareform",
    "yule",
]

def directed_hausdorff(u, v, seed: int = 0): ...
def minkowski(u, v, p: int = 2, w: Incomplete | None = None): ...
def euclidean(u, v, w: Incomplete | None = None): ...
def sqeuclidean(u, v, w: Incomplete | None = None): ...
def correlation(u, v, w: Incomplete | None = None, centered: bool = True): ...
def cosine(u, v, w: Incomplete | None = None): ...
def hamming(u, v, w: Incomplete | None = None): ...
def jaccard(u, v, w: Incomplete | None = None): ...
def kulczynski1(u, v, *, w: Incomplete | None = None): ...
def seuclidean(u, v, V): ...
def cityblock(u, v, w: Incomplete | None = None): ...
def mahalanobis(u, v, VI): ...
def chebyshev(u, v, w: Incomplete | None = None): ...
def braycurtis(u, v, w: Incomplete | None = None): ...
def canberra(u, v, w: Incomplete | None = None): ...
def jensenshannon(
    p, q, base: Incomplete | None = None, *, axis: int = 0, keepdims: bool = False
): ...
def yule(u, v, w: Incomplete | None = None): ...
def dice(u, v, w: Incomplete | None = None): ...
def rogerstanimoto(u, v, w: Incomplete | None = None): ...
def russellrao(u, v, w: Incomplete | None = None): ...
def sokalmichener(u, v, w: Incomplete | None = None): ...
def sokalsneath(u, v, w: Incomplete | None = None): ...
@dataclasses.dataclass(frozen=True)
class CDistMetricWrapper:
    metric_name: str
    def __call__(self, XA, XB, *, out: Incomplete | None = None, **kwargs): ...
    def __init__(self, metric_name) -> None: ...

@dataclasses.dataclass(frozen=True)
class PDistMetricWrapper:
    metric_name: str
    def __call__(self, X, *, out: Incomplete | None = None, **kwargs): ...
    def __init__(self, metric_name) -> None: ...

@dataclasses.dataclass(frozen=True)
class MetricInfo:
    canonical_name: str
    aka: set[str]
    dist_func: Callable
    cdist_func: Callable
    pdist_func: Callable
    validator: Callable | None = ...
    types: list[str] = ...
    requires_contiguous_out: bool = ...
    def __init__(
        self,
        canonical_name,
        aka,
        dist_func,
        cdist_func,
        pdist_func,
        validator=...,
        types=...,
        requires_contiguous_out=...,
    ) -> None: ...

def pdist(X, metric: str = "euclidean", *, out: Incomplete | None = None, **kwargs): ...
def squareform(X, force: str = "no", checks: bool = True): ...
def is_valid_dm(
    D, tol: float = 0.0, throw: bool = False, name: str = "D", warning: bool = False
): ...
def is_valid_y(
    y, warning: bool = False, throw: bool = False, name: Incomplete | None = None
): ...
def num_obs_dm(d): ...
def num_obs_y(Y): ...
def cdist(
    XA, XB, metric: str = "euclidean", *, out: Incomplete | None = None, **kwargs
): ...
