from collections.abc import Container, Iterable
from io import BytesIO
from typing import Any, BinaryIO, Literal

from _typeshed import Incomplete
from numpy.typing import NDArray

from ._mio5_utils import VarHeader5
from ._miobase import (
    MatFileReader,
)

ByteOrder = Literal["<", ">"]
SupportedByteOrderCode = Literal[
    "little", "big", "l", "b", "le", "be", "<", ">", "native", "=", "swapped", "s"
]

class MatFile5Reader(MatFileReader):
    uint16_codec: str

    def __init__(
        self,
        mat_stream: BinaryIO,
        byte_order: SupportedByteOrderCode | None = ...,
        mat_dtype: bool = ...,
        squeeze_me: bool = ...,
        chars_as_strings: bool = ...,
        matlab_compatible: bool = ...,
        struct_as_record: bool = ...,
        verify_compressed_data_integrity: bool = ...,
        uint16_codec: str | None = ...,
        simplify_cells: bool = ...,
    ) -> None: ...
    def guess_byte_order(self) -> ByteOrder: ...
    def read_file_header(self) -> dict[str, Any]: ...
    def initialize_read(self) -> None: ...
    def read_var_header(self) -> VarHeader5: ...
    def read_var_array(
        self, header: VarHeader5, process: bool = ...
    ) -> NDArray[Any]: ...
    def get_variables(
        self, variable_names: str | Iterable[str] | None = ...
    ) -> dict[str, Any]: ...
    def list_variables(self) -> list[tuple[str, tuple[int, ...], str]]: ...

def varmats_from_mat(file_obj: BinaryIO) -> Iterable[tuple[str, BytesIO]]: ...

class EmptyStructMarker: ...

def to_writeable(source: Any | None) -> NDArray[Any] | EmptyStructMarker | None: ...

NDT_FILE_HDR: Iterable[tuple[str, str]]
NDT_TAG_FULL: Iterable[tuple[str, str]]
NDT_TAG_SMALL: Iterable[tuple[str, str]]
NDT_ARRAY_FLAGS: Iterable[tuple[str, str]]

class VarWriter5:
    mat_tag: NDArray[Any]
    file_stream: MatFile5Writer
    unicode_strings: Incomplete
    long_field_names: Incomplete
    oned_as: Incomplete

    def __init__(self, file_writer) -> None: ...
    def write_bytes(self, arr) -> None: ...
    def write_string(self, s) -> None: ...
    def write_element(self, arr, mdtype: Incomplete | None = None) -> None: ...
    def write_smalldata_element(self, arr, mdtype, byte_count) -> None: ...
    def write_regular_element(self, arr, mdtype, byte_count) -> None: ...
    def write_header(
        self,
        shape,
        mclass,
        is_complex: bool = False,
        is_logical: bool = False,
        nzmax: int = 0,
    ) -> None: ...
    def update_matrix_tag(self, start_pos) -> None: ...
    def write_top(self, arr, name, is_global) -> None: ...
    def write(self, arr) -> None: ...
    def write_numeric(self, arr) -> None: ...
    def write_char(self, arr, codec: str = "ascii") -> None: ...
    def write_sparse(self, arr) -> None: ...
    def write_cells(self, arr) -> None: ...
    def write_empty_struct(self) -> None: ...
    def write_struct(self, arr) -> None: ...
    def write_object(self, arr) -> None: ...

class MatFile5Writer:
    file_stream: BinaryIO
    do_compression: bool
    unicode_strings: bool
    global_vars: Container[str]
    long_field_names: bool
    oned_as: Literal["row", "column"]
    def __init__(
        self,
        file_stream,
        do_compression: bool = ...,
        unicode_strings: bool = ...,
        global_vars: Container[str] | None = ...,
        long_field_names: bool = ...,
        oned_as: Literal["row", "column"] = ...,
    ) -> None: ...
    def write_file_header(self) -> None: ...
    def put_variables(
        self, mdict: dict[str, Any], write_header: bool | None = ...
    ) -> None: ...
