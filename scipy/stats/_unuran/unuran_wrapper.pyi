import scipy.stats as stats
from _typeshed import Incomplete
from scipy._lib._util import check_random_state as check_random_state
from scipy.stats._distn_infrastructure import argsreduce as argsreduce, rv_frozen as rv_frozen
from typing import Any, ClassVar, overload

__test__: dict

class DiscreteAliasUrn(Method):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @overload
    @classmethod
    def __init__(cls, pv, random_state=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, random_state=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, pv, urn_factor=..., random_state=...) -> Any: ...

class DiscreteGuideTable(Method):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @overload
    @classmethod
    def __init__(cls, pv, random_state=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, random_state=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, pv, guide_factor=..., random_state=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, random_state=...) -> Any: ...
    def ppf(self, u) -> Any: ...

class Method:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def rvs(self, size=..., random_state=...) -> Any: ...
    def set_random_state(self, random_state=...) -> Any: ...
    def __reduce__(self): ...

class NumericalInverseHermite(Method):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    intervals: Incomplete
    midpoint_error: Incomplete
    @overload
    @classmethod
    def __init__(cls, dist, random_state=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, order=..., random_state=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, order=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, order=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, u_resolution=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, u_resolution=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, u_resolution=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, u_resolution=...) -> Any: ...
    def ppf(self, u) -> Any: ...
    def qrvs(self, size=..., d=..., qmc_engine=...) -> Any: ...
    def u_error(self, sample_size=...) -> Any: ...

class NumericalInversePolynomial(Method):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    intervals: Incomplete
    @overload
    @classmethod
    def __init__(cls, dist, random_state=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, random_state=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, u_resolution=..., random_state=...) -> Any: ...
    def cdf(self, x) -> Any: ...
    def ppf(self, u) -> Any: ...
    def qrvs(self, size=..., d=..., qmc_engine=...) -> Any: ...
    def u_error(self, sample_size=...) -> Any: ...

class SimpleRatioUniforms(Method):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @overload
    @classmethod
    def __init__(cls, dist, mode=..., 
...pdf_area=..., 
...random_state=...) -> Any: ...
    @overload
    @classmethod
    def __init__(cls, dist, mode=..., 
...pdf_area=..., 
...cdf_at_mode=..., 
...random_state=...) -> Any: ...

class TransformedDensityRejection(Method):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    hat_area: Incomplete
    squeeze_area: Incomplete
    squeeze_hat_ratio: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @overload
    def ppf_hat(self, u) -> Any: ...
    @overload
    def ppf_hat(self, u) -> Any: ...

class UNURANError(RuntimeError): ...

class _URNG:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...
