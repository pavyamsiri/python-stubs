import _cython_3_0_10
from typing import ClassVar

__test__: dict
calculate_cluster_sizes: _cython_3_0_10.cython_function_or_method
cluster_dist: _cython_3_0_10.cython_function_or_method
cluster_in: _cython_3_0_10.cython_function_or_method
cluster_maxclust_dist: _cython_3_0_10.cython_function_or_method
cluster_maxclust_monocrit: _cython_3_0_10.cython_function_or_method
cluster_monocrit: _cython_3_0_10.cython_function_or_method
cophenetic_distances: _cython_3_0_10.cython_function_or_method
fast_linkage: _cython_3_0_10.cython_function_or_method
get_max_Rfield_for_each_cluster: _cython_3_0_10.cython_function_or_method
get_max_dist_for_each_cluster: _cython_3_0_10.cython_function_or_method
inconsistent: _cython_3_0_10.cython_function_or_method
leaders: _cython_3_0_10.cython_function_or_method
linkage: _cython_3_0_10.cython_function_or_method
mst_single_linkage: _cython_3_0_10.cython_function_or_method
nn_chain: _cython_3_0_10.cython_function_or_method
prelist: _cython_3_0_10.cython_function_or_method

class Heap:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def change_value(self, *args, **kwargs): ...
    def get_min(self, *args, **kwargs): ...
    def remove_min(self, *args, **kwargs): ...
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class LinkageUnionFind:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...
