from ._base import _spbase, sparray
from ._index import IndexMixin
from ._matrix import spmatrix
from _typeshed import Incomplete

__all__ = ['dok_array', 'dok_matrix', 'isspmatrix_dok']

class _dok_base(_spbase, IndexMixin, dict):
    dtype: Incomplete
    def __init__(self, arg1, shape: Incomplete | None = None, dtype: Incomplete | None = None, copy: bool = False) -> None: ...
    def update(self, val) -> None: ...
    def count_nonzero(self): ...
    def __len__(self) -> int: ...
    def __contains__(self, key) -> bool: ...
    def setdefault(self, key, default: Incomplete | None = None, /): ...
    def __delitem__(self, key) -> None: ...
    def clear(self): ...
    def pop(self, /, *args): ...
    def __reversed__(self) -> None: ...
    def __or__(self, other) -> None: ...
    def __ror__(self, other) -> None: ...
    def __ior__(self, other) -> None: ...
    def popitem(self): ...
    def items(self): ...
    def keys(self): ...
    def values(self): ...
    def get(self, key, default: float = 0.0): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __neg__(self): ...
    def __imul__(self, other): ...
    def __truediv__(self, other): ...
    def __itruediv__(self, other): ...
    def __reduce__(self): ...
    def diagonal(self, k: int = 0): ...
    def transpose(self, axes: Incomplete | None = None, copy: bool = False): ...
    def conjtransp(self): ...
    def copy(self): ...
    @classmethod
    def fromkeys(cls, iterable, value: int = 1, /): ...
    def tocoo(self, copy: bool = False): ...
    def todok(self, copy: bool = False): ...
    def tocsc(self, copy: bool = False): ...
    def resize(self, *shape) -> None: ...
    def astype(self, dtype, casting: str = 'unsafe', copy: bool = True): ...

def isspmatrix_dok(x): ...

class dok_array(_dok_base, sparray): ...

class dok_matrix(spmatrix, _dok_base):
    __dict__: Incomplete
    def set_shape(self, shape) -> None: ...
    def get_shape(self): ...
    shape: Incomplete
    def __reversed__(self): ...
    def __or__(self, other): ...
    def __ror__(self, other): ...
    def __ior__(self, other): ...
