from ._base import sparray
from ._data import _data_matrix, _minmax_mixin
from ._matrix import spmatrix
from _typeshed import Incomplete

__all__ = ["coo_array", "coo_matrix", "isspmatrix_coo"]

class _coo_base(_data_matrix, _minmax_mixin):
    coords: Incomplete
    data: Incomplete
    has_canonical_format: bool
    def __init__(
        self,
        arg1,
        shape: Incomplete | None = None,
        dtype: Incomplete | None = None,
        copy: bool = False,
    ) -> None: ...
    @property
    def row(self): ...
    @row.setter
    def row(self, new_row) -> None: ...
    @property
    def col(self): ...
    @col.setter
    def col(self, new_col) -> None: ...
    def reshape(self, *args, **kwargs): ...
    def transpose(self, axes: Incomplete | None = None, copy: bool = False): ...
    def resize(self, *shape) -> None: ...
    def toarray(
        self, order: Incomplete | None = None, out: Incomplete | None = None
    ): ...
    def tocsc(self, copy: bool = False): ...
    def tocsr(self, copy: bool = False): ...
    def tocoo(self, copy: bool = False): ...
    def todia(self, copy: bool = False): ...
    def todok(self, copy: bool = False): ...
    def diagonal(self, k: int = 0): ...
    def sum_duplicates(self) -> None: ...
    def eliminate_zeros(self) -> None: ...

def isspmatrix_coo(x): ...

class coo_array(_coo_base, sparray): ...
class coo_matrix(spmatrix, _coo_base): ...
