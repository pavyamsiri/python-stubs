from _typeshed import Incomplete
from scipy.sparse.linalg import LinearOperator

__all__ = ["LaplacianNd"]

class LaplacianNd(LinearOperator):
    grid_shape: Incomplete
    boundary_conditions: Incomplete
    def __init__(
        self, grid_shape, *, boundary_conditions: str = "neumann", dtype=...
    ) -> None: ...
    def eigenvalues(self, m: Incomplete | None = None): ...
    def eigenvectors(self, m: Incomplete | None = None): ...
    def toarray(self): ...
    def tosparse(self): ...

class Sakurai(LinearOperator):
    n: Incomplete
    dtype: Incomplete
    def __init__(self, n, dtype=...) -> None: ...
    def eigenvalues(self, m: Incomplete | None = None): ...
    def tobanded(self): ...
    def tosparse(self): ...
    def toarray(self): ...

class MikotaM(LinearOperator):
    shape: Incomplete
    dtype: Incomplete
    def __init__(self, shape, dtype=...) -> None: ...
    def tobanded(self): ...
    def tosparse(self): ...
    def toarray(self): ...

class MikotaK(LinearOperator):
    shape: Incomplete
    dtype: Incomplete
    def __init__(self, shape, dtype=...) -> None: ...
    def tobanded(self): ...
    def tosparse(self): ...
    def toarray(self): ...

class MikotaPair:
    n: Incomplete
    dtype: Incomplete
    shape: Incomplete
    m: Incomplete
    k: Incomplete
    def __init__(self, n, dtype=...) -> None: ...
    def eigenvalues(self, m: Incomplete | None = None): ...
